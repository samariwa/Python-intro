'''def remove(listx,listy):
    listz=list()
    for n in listx:
        if n in listy and n not in listz:
            listz.append(n)
    return listz    
listx=[14,22,1,4,2,8,13,56,57,80,5,7]
listy=[8,6,91,57,7,2,5,100,13,11,12,9,3,80]
print(remove(listx,listy))'''
'''
listx=[14,22,1,4,2,8,13,56,57,80,5,7]
listy=[8,6,91,57,7,2,5,100,13,11,12,9,3,80]
listz=list()
listz=[n for n in listx if n in listy and n not in listz]
print(listz)
'''

'''
mylist=[7,5]
mylist.append(4)
mylist.extend([57,12,90,5])
mylist.extend((57,12,90,5))
myList.insert(2,89)
mylist.sort()
#In the following if you dont specify index of the element that you are popping it will remove the last element
mylist.pop()
#In the following it will remove the element at index 0
mylist.pop(0)
#The following code is for the cloning method
mylist.copy()
newlist=oldlist.copy()
mylist.reverse()
mylist.merge(listy)
#counting the elements in the list
mylist.count
#delete removes by you declaring the elements index
del mylist[1]
#remove removes by you giving the element itself being removed
mylist.remove(90)
print(mylist)
'''
'''
negative index
mylist=[2,3,4]
print mylist[-2]
'''
'''
list slicing
a=("a","b","c","d")
x=slice(3)
print(a[x])

or
'''
'''
a=("a","b","c","d")
x=a[0:4]
print(x)
'''
'''
list comprehension
a=[4,7,1,5,90,6]
b=[k**2 for k in a if k%2==0]
print (b)
'''
'''
DICTIONARIES

dictionary creating
d={}
d=dict()
d["k"]="Sam"
print(d.get("k"))
 
Alist can be stored in a dictionary
hudumaNamba["Student"]=['John','Mercy','James']
print(hudumaNamba)
OUTPUT={'Students':['John','Mercy','James']}

hudumaNamba["feeBalance"]={"1":7500,"2":3256}
print(hudumaNamba)

hudumaNamba=dict()
hudumaNamba[1000]="KE001M"
hudumaNamba[1001]="KE001F"
print(hudumaNamba.get(1000))  or   print(hudumaNamba[1000])
#The .get method is recommended because it handles the error better. The keys must be unique if the
 element of same Key as existing element is created, th existing key will be overwritten.
 
 DICTIONARY FUNCTIONS
1.) get(key)
2.)keys()-returns a list of keys e.g [x,y]
 print(hudumaNambas.keys())
3.)values()-returns a list of values
 print(hudumaNumbas.values())
4.)items()-list of key-value pairs e.g. [(key:value),(key2:value2)]
  print(hudumaNambas.items())
5.)has_key(key)- checks whether a certain key exists in a dictionary.Returns true or false.

Dictionary comprehension- creating a dictionary out of a dictionary
d=dict()
for n in range(20,30):
    if n%2==1:
        d[n]=n*n  or n**2
print(d)
in one line= d{n:n**2 for n in range(20,30)if n%2==1}
print(d)



PYTHON LAMBDA FUNCTIONS
A lambda fuction is a small anonymous fuction. It can take any number of parameters but only one expression.
SYNTAX
myFuction=lambda arguements:expression
 e.g. fuction=lambda a:a+50
      print(fuct(5))
      
      f=lambda x,y:x+y
      print(f(9,85))

A lambda function that is returned from another function
def myFunc(n):
     return lambda a:a*n
myLambda F=myFunc(4)
r=myLambda F(2,3)
print(r)


MODULES
These are functions you can import in your application. To create a module just save the code you want in a file with the 
file extension .py
To import the module using the import statement
import myModule(the whole module)
myModule.greeting("Jonathan")(when importing a specific function in the module)
Renaming a module:import myModule as mx
                  mx.greeting("Jonathan")
     This is called an alias(when it has a different name)             
      
#class inheritance
#__init__ defines constructor
class Person:
    def __init__(self,x):
        self.age=x
    def setName(self,newName):
        self.name=newName
    def getName(self):
        return self.name
class Student(Person):
    pass

studObj=Student(56)
studObj.setName('Sam')
print(studObj.getName())
'''
class Person:
    def __init__(self,x):
        self.age=x
    def setName(self,newName):
        self.name=newName
    def getName(self):
        return self.name
class Student(Person):
    def __init__(self):
        self.age=4

studObj=Student()
studObj.setName('Sam')
print(studObj.getName())

'''
class Person:
    def __init__(self,x):
        self.age=x
    def setName(self,newName):
        self.name=newName
    def getName(self):
        return self.name
    def doubleAge(self):
        self.age=self.age*2
class Student(Person):
    def multiplyAge(self):
        self.age=self.age*4

studObj=Student(7)
print(studObj.age)
studObj.doubleAge()
print(studObj.age)
studObj.multiplyAge()
print(studObj.age)

'''
studObj.multiplyAge()
print(studObj.age)

'''
#super keyword
class Person:
    def __init__(self,x):
        self.age=x
    def setName(self,newName):
        self.name=newName
    def getName(self):
        return self.name
    def doubleAge(self):
        self.age=self.age*2
    def add(self):
        self.age+=2
class Student(Person):
    def multiplyAge(self):
        self.age=self.age*4
    def add(self):
        self.age+=10
    def printAge(self):
        self.add()
        print(self.age)
        super().add()
        print(self.age)

studObj=Student(7)
studObj.printAge()

def myFunction(n):
     return lambda a:a*n
myLambda =myFunction(12)
r=myLambda (971)
print(r)

try:
    x=int(input('x='))
    y=int(input('y='))
    def myFunction(n):
        return lambda a:a*n
        myLambda =myFunction(x)
        r=myLambda (y)    
except ValueError:
    print('Value Error')
else:
    print(r)

L1= [9,31,1,4,2,8,13,11,57,5,5,7]
L2= [3,9,7,57,7,2,5,100,31,11,12,9,3,80]
L3=list()
L3=[n for n in L1 if n in L2 and n not in L3]
print(L3)
